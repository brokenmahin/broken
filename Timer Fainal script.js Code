// === Elements
const display = document.getElementById('timer'); // timer display <p>
const startBtn = document.getElementById('start'); // Start button
const stopBtn = document.getElementById('stop'); // Stop button
const resetBtn = document.getElementById('reset'); // Reset button

// === Config
const POMODORO_SECONDS = 25 * 60; // 25:00 in seconds
let remaining = POMODORO_SECONDS; // current remaining seconds
let timerId = null; // setInterval handle (null = not running)

// === Utils
const fmt = n => (n < 10 ? '0' + n : '' + n); // 2-digit formatter
function render() {
  // update UI text
  const m = Math.floor(remaining / 60); // minutes part
  const s = remaining % 60; // seconds part
  display.textContent = `${fmt(m)}:${fmt(s)}`; // mm:ss
}

// === Controls
function start() {
  // already running? show alert & exit
  if (timerId) {
    alert('‚è±Ô∏è Timer already running!');
    return;
  }
  // at 0? (finished) ‚Äî do not start; just alert
  if (remaining <= 0) {
    alert('‚úÖ Session finished. Please Reset to start again.');
    return;
  }

  // start ticking each second
  timerId = setInterval(() => {
    remaining--; // decrease 1s
    render(); // update display

    if (remaining <= 0) {
      // reached zero
      clearInterval(timerId); // stop interval
      timerId = null; // mark as not running
      remaining = 0; // clamp to 0
      render(); // show 00:00
      // optional: alert('üéâ Pomodoro complete!');
    }
  }, 1000);
}

function stop() {
  // not running? show alert & exit
  if (!timerId) {
    alert('‚è∏Ô∏è Timer is already stopped.');
    return;
  }
  clearInterval(timerId); // pause
  timerId = null; // mark as not running
}

function reset() {
  // already at initial state AND not running? show alert
  if (remaining === POMODORO_SECONDS && !timerId) {
    alert('üîÑ Timer is already at 25:00.');
    return;
  }
  clearInterval(timerId); // stop if running
  timerId = null; // mark as not running
  remaining = POMODORO_SECONDS; // back to 25:00
  render(); // update UI
}

// === Wire buttons
startBtn.addEventListener('click', start); // Start -> start()
stopBtn.addEventListener('click', stop); // Stop  -> stop()
resetBtn.addEventListener('click', reset); // Reset -> reset()

// initial UI
render(); // show 25:00 on load


//shonkep
current ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ = ‡¶ï‡ßã‡¶® step ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶§‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶õ‡ßá‡•§

render() = ‡¶∏‡¶¨ step ‡¶è‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ (done/todo) ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡ßÅ‡¶ú ‡¶≤‡¶æ‡¶á‡¶® ‡¶Ü‡¶Å‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡•§

nextBtn / prevBtn = ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶¨‡¶æ ‡¶™‡ßá‡¶õ‡¶®‡ßá ‡¶®‡ßá‡ßü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡•§

dot click = ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü step ‡¶è ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡•§

resize ‡¶è render() ‡¶ï‡¶≤ = responsive ‡¶≤‡¶æ‡¶á‡¶® ‡¶Ø‡ßá‡¶®‡ßã ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶∞‡ßá‡•§
